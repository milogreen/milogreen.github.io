{"version":3,"file":"static/css/main.6c7f7024.css","mappings":"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X,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,gBACE,iBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CACX,iBACE,kBAFS,CAMb,qBACE,uBAGF,mBACE,qBAQI,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CAQX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CAMb,yBACE,uBAGF,uBACE,qBC3QF,wBDiRI,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CAQX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CAMb,yBACE,uBAGF,uBACE,sBClSJ,wBDiRI,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,sBACE,mBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CACX,uBACE,oBAFS,CAQX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,oBACE,iBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CACX,qBACE,kBAFS,CAMb,yBACE,uBAGF,uBACE,sBClSJ,wBDiRI,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CAQX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CAMb,0BACE,uBAGF,wBACE,sBClSJ,wBDiRI,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,uBACE,mBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CACX,wBACE,oBAFS,CAQX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,qBACE,iBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CACX,sBACE,kBAFS,CAMb,0BACE,uBAGF,wBACE,sBEzYV,iBAEC,oBADA,gBCGY,CDCb,eAEC,oBADA,eACA,CAEA,kBACC,kBCTW,CDab,eAEC,mBADA,eCZY,CDeZ,kBACC,kBClBW,CDsBb,cAEC,oBADA,gBCvBY,CCHb,KACC,YACA,WDCY,kBAFA,CCGZ,kBDCY,CCEb,aACC,mBACA,aCLQ,CDQT,eACC,kBCVQ,CDWR,aCfS,CDkBV,WACC,gBACA,iBACA,aCZS,CCPT,aACE,kBDCM,CCGT,iBACC,mBHRY,CGSZ,kBACA,mBACA,YHTY,CGYb,aAEC,yBADA,oBDbQ,CCiBT,YACC,gBHlBY,CGqBb,YAEC,QAAO,CADP,iBACA,CCzBD,SAKC,MAAK,CAJL,kBFGQ,CEFR,kBACA,mBACA,YACA,CCHD,KAOC,mCACA,kCAPA,kBHEQ,CGDR,aHHS,CGKT,oIADA,QAKA,CAGD,ECNC,eAEA,gBADA,mBDQA,iBLbY,CKgBb,GCsCC,mBACA,gBAEA,CDrCD,MCoCC,gBACA,QAPA,CD9BD,GC2BC,mBACA,oBAEA,CD1BD,GCgBC,eACA,kBAEA,CDfD,MCcC,gBACA,QAPA,CDRD,GCKC,kBACA,mBAEA,CDJD,GCNC,kBAEA,gBADA,oBAEA,SDOD,GCfC,eACA,CDkBD,KCrBC,eACA,mBAEA,QJhBS,CGkCV,EAIC,cCtCA,gBDqCA,SHrCS,CGyCV,KACE","sources":["../node_modules/@carbon/styles/scss/components/aspect-ratio/_aspect-ratio.scss","../node_modules/@carbon/grid/scss/_css-grid.scss","../node_modules/@carbon/grid/scss/_breakpoint.scss","App.scss","styles/spacing.scss","components/Btn/_btn.scss","styles/color.scss","components/Card/_card.scss","content/Projects/_projects.scss","index.scss","styles/type.scss"],"sourcesContent":["//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use 'sass:list';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../../config' as *;\n\n/// The aspect ratios that are used to generate corresponding aspect ratio\n/// classes in code\n/// @type List\n/// @access public\n/// @group @carbon/grid\n$aspect-ratios: (\n  (16, 9),\n  (9, 16),\n  (2, 1),\n  (1, 2),\n  (4, 3),\n  (3, 4),\n  (3, 2),\n  (2, 3),\n  (1, 1)\n);\n\n/// Generates the CSS classname utilities for the aspect ratios\n///\n/// CSS Tricks article on aspect ratios and all the different ways it can be done.\n/// https://css-tricks.com/aspect-ratio-boxes/#article-header-id-6\n///\n/// That article references an earlier article on the topic.\n/// https://keithjgrant.com/posts/2017/03/aspect-ratios/\n///\n/// @param {Number} $width width from an aspect ratio\n/// @param {Number} $height height from an aspect ratio\n/// @access private\n/// @group @carbon/grid\n@mixin aspect-ratio($aspect-ratios: $aspect-ratios) {\n  .#{$prefix}--aspect-ratio {\n    position: relative;\n  }\n\n  .#{$prefix}--aspect-ratio::before {\n    width: 1px;\n    height: 0;\n    margin-left: -1px;\n    content: '';\n    float: left;\n  }\n\n  .#{$prefix}--aspect-ratio::after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n\n  @each $aspect-ratio in $aspect-ratios {\n    $width: list.nth($aspect-ratio, 1);\n    $height: list.nth($aspect-ratio, 2);\n\n    .#{$prefix}--aspect-ratio--#{$width}x#{$height}::before {\n      @if meta.function-exists('div', 'math') {\n        padding-top: math.percentage(math.div($height, $width));\n      } @else {\n        padding-top: math.percentage(($height / $width));\n      }\n    }\n  }\n}\n","//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'config' as *;\n@use 'breakpoint' as *;\n\n/// Emit all the styles related to the CSS Grid, these include:\n/// - The base grid class\n/// - The various grid modes\n/// - The ability to specifiy column span\n/// - The ability to specifiy column start,end position\n/// - Support for subgrid\n/// - Support for hanging content on a grid column\n/// - Support for controlling grid gutter on a cell basis\n/// - Support for specifying content alignment\n///\n///\n/// In general, this mixin is structured in a way to emit the fewest CSS styles\n/// as possible. To do this, we will (as much as possible) not emit a value if\n/// one is already defined at a previous breakpoint.\n///\n/// In addition, this mixin will break down emitting styles into several stages:\n/// 1. Emit styles for the smallest breakpoint without any breakpoint. By\n/// default, these styles will be on\n/// 2. For every other breakpoint, wrap it in a breakpoint so that it only is\n/// triggered when that breakpoint is applied\n/// 3. In situations where it is appropriate, we also will emit \"unconditional\"\n/// selectors that will always apply. For example, if you wanted a column to\n/// always span four columns\n@mixin css-grid($breakpoints: $grid-breakpoints) {\n  /// The :root selector is responsible for setting several top-level CSS Custom\n  /// Properties, including the overall grid gutter, grid column count, and grid\n  /// margin\n  :root {\n    --cds-grid-gutter: #{$grid-gutter};\n\n    // Iterate through the grid breakpoints and only emit the grid-columns and\n    // grid-margin CSS Custom Properties if they've changed from the previous\n    // breakpoint. By default, we emit the smallest breakpoint values on the\n    // :root selector\n    @each $key, $value in $breakpoints {\n      @if is-smallest-breakpoint($key, $breakpoints) {\n        --cds-grid-columns: #{get-column-count($breakpoints, $key)};\n        --cds-grid-margin: #{get-margin($breakpoints, $key)};\n      } @else {\n        $previous-breakpoint: breakpoint-prev($key, $breakpoints);\n        $changes: ();\n\n        @if get-column-count($breakpoints, $key) !=\n          get-column-count($breakpoints, $previous-breakpoint)\n        {\n          $changes: map.set(\n            $changes,\n            grid-columns,\n            get-column-count($breakpoints, $key)\n          );\n        }\n\n        @if get-margin($breakpoints, $key) !=\n          get-margin($breakpoints, $previous-breakpoint)\n        {\n          $changes: map.set(\n            $changes,\n            grid-margin,\n            get-margin($breakpoints, $key)\n          );\n        }\n\n        @include breakpoint($key) {\n          @each $name, $value in $changes {\n            --cds-#{$name}: #{$value};\n          }\n        }\n      }\n    }\n  }\n\n  // -----------------------------------------------------------------------------\n  // Base CSS Grid\n  // -----------------------------------------------------------------------------\n  .#{$prefix}--css-grid {\n    --cds-grid-gutter-start: calc(var(--cds-grid-gutter) / 2);\n    --cds-grid-gutter-end: calc(var(--cds-grid-gutter) / 2);\n    // We split out a separate \"column hang\" since \"gutter-start\" is set\n    // dynamically and could be 0\n    --cds-grid-column-hang: calc(var(--cds-grid-gutter) / 2);\n\n    display: grid;\n    max-width: get-grid-width(\n      $breakpoints,\n      largest-breakpoint-name($breakpoints)\n    );\n    padding-right: var(--cds-grid-margin);\n    padding-left: var(--cds-grid-margin);\n    margin-right: auto;\n    margin-left: auto;\n    grid-template-columns: repeat(var(--cds-grid-columns), minmax(0, 1fr));\n  }\n\n  // -----------------------------------------------------------------------------\n  // Full width\n  // -----------------------------------------------------------------------------\n  .#{$prefix}--css-grid--full-width {\n    max-width: 100%;\n  }\n\n  // -----------------------------------------------------------------------------\n  // Column\n  // -----------------------------------------------------------------------------\n\n  // Add gutter to columns in a CSS Grid. Unfortunately, we cannot use\n  // `grid-gap`, `column-gap`, etc. as we need to conditionally remove leading\n  // and trailing gutter from a column.\n  .#{$prefix}--css-grid-column {\n    // grid-mode-start, grid-mode-end are meant to capture the \"grid settings\"\n    // so that subgrids can correctly fit in parent grids by reverting the\n    // grid's outer padding\n    --cds-grid-mode-start: var(--cds-grid-gutter-start);\n    --cds-grid-mode-end: var(--cds-grid-gutter-end);\n\n    margin-right: var(--cds-grid-gutter-end);\n    margin-left: var(--cds-grid-gutter-start);\n\n    [dir='rtl'] & {\n      margin-right: var(--cds-grid-gutter-start);\n      margin-left: var(--cds-grid-gutter-end);\n    }\n  }\n\n  // -----------------------------------------------------------------------------\n  // Grid modes\n  // -----------------------------------------------------------------------------\n\n  // Narrow\n  .#{$prefix}--css-grid--narrow {\n    --cds-grid-gutter-start: 0;\n  }\n\n  // Condensed\n  .#{$prefix}--css-grid--condensed {\n    --cds-grid-gutter: #{$grid-gutter-condensed};\n    --cds-grid-column-hang: #{math.div($grid-gutter, 2) -\n      math.div($grid-gutter-condensed, 2)};\n  }\n\n  // -----------------------------------------------------------------------------\n  // Subgrid\n  // -----------------------------------------------------------------------------\n  .#{$prefix}--subgrid {\n    display: grid;\n    margin-right: calc(var(--cds-grid-mode-end) * -1);\n    margin-left: calc(var(--cds-grid-mode-start) * -1);\n    grid-template-columns: repeat(var(--cds-grid-columns), minmax(0, 1fr));\n\n    [dir='rtl'] & {\n      margin-right: calc(var(--cds-grid-mode-start) * -1);\n      margin-left: calc(var(--cds-grid-mode-end) * -1);\n    }\n  }\n\n  // Support the grid modes in subgrids\n  .#{$prefix}--subgrid--wide {\n    --cds-grid-gutter-start: #{math.div($grid-gutter, 2)};\n    --cds-grid-gutter-end: #{math.div($grid-gutter, 2)};\n    --cds-grid-column-hang: 0;\n  }\n\n  .#{$prefix}--subgrid--narrow {\n    --cds-grid-gutter-start: 0;\n    --cds-grid-gutter-end: #{math.div($grid-gutter, 2)};\n    --cds-grid-column-hang: #{math.div($grid-gutter, 2)};\n  }\n\n  .#{$prefix}--subgrid--condensed {\n    --cds-grid-gutter-start: #{math.div($grid-gutter-condensed, 2)};\n    --cds-grid-gutter-end: #{math.div($grid-gutter-condensed, 2)};\n    --cds-grid-column-hang: #{math.div($grid-gutter, 2) -\n      math.div($grid-gutter-condensed, 2)};\n  }\n\n  // -----------------------------------------------------------------------------\n  // Column hang\n  // -----------------------------------------------------------------------------\n\n  // Helper class to allow for text alignment in columns where the leading\n  // gutter is missing (like narrow) or is reduced (like in condensed).\n  .#{$prefix}--grid-column-hang {\n    margin-left: var(--cds-grid-column-hang);\n\n    [dir='rtl'] & {\n      margin-right: var(--cds-grid-column-hang);\n      margin-left: initial;\n    }\n  }\n\n  // -----------------------------------------------------------------------------\n  // Column span\n  // -----------------------------------------------------------------------------\n\n  // Generate col-span-{0-16} classes which unconditionally set column span\n  // regardless of breakpoint\n  @for $i from 0 through get-grid-columns($breakpoints) {\n    .#{$prefix}--col-span-#{$i} {\n      @include -column-span($i);\n    }\n  }\n\n  // Responsive column span\n  @each $name, $value in $breakpoints {\n    // Column span per breakpoint\n    @for $i from 0 through get-column-count($breakpoints, $name) {\n      @if is-smallest-breakpoint($name, $breakpoints) {\n        .#{$prefix}--#{$name}\\:col-span-#{$i} {\n          @include -column-span($i);\n        }\n      } @else {\n        @include breakpoint($name) {\n          .#{$prefix}--#{$name}\\:col-span-#{$i} {\n            @include -column-span($i);\n          }\n        }\n      }\n    }\n\n    // Percent column span per breakpoint\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      .#{$prefix}--#{$name}\\:col-span-auto {\n        grid-column: auto;\n      }\n\n      .#{$prefix}--#{$name}\\:col-span-100 {\n        grid-column: 1 / -1;\n      }\n\n      $columns: get-column-count($breakpoints, $name);\n\n      .#{$prefix}--#{$name}\\:col-span-75 {\n        $span: $columns * 0.75;\n        --cds-grid-columns: #{$span};\n\n        grid-column: span #{$span} / span #{$span};\n      }\n\n      .#{$prefix}--#{$name}\\:col-span-50 {\n        $span: $columns * 0.5;\n        --cds-grid-columns: #{$span};\n\n        grid-column: span #{$span} / span #{$span};\n      }\n\n      .#{$prefix}--#{$name}\\:col-span-25 {\n        $span: $columns * 0.25;\n        --cds-grid-columns: #{$span};\n\n        grid-column: span #{$span} / span #{$span};\n      }\n    } @else {\n      @include breakpoint($name) {\n        .#{$prefix}--#{$name}\\:col-span-auto {\n          grid-column: auto;\n        }\n\n        .#{$prefix}--#{$name}\\:col-span-100 {\n          grid-column: 1 / -1;\n        }\n\n        $columns: get-column-count($breakpoints, $name);\n\n        .#{$prefix}--#{$name}\\:col-span-75 {\n          $span: $columns * 0.75;\n          --cds-grid-columns: #{$span};\n\n          grid-column: span #{$span} / span #{$span};\n        }\n\n        .#{$prefix}--#{$name}\\:col-span-50 {\n          $span: $columns * 0.5;\n          --cds-grid-columns: #{$span};\n\n          grid-column: span #{$span} / span #{$span};\n        }\n\n        .#{$prefix}--#{$name}\\:col-span-25 {\n          $span: $columns * 0.25;\n          --cds-grid-columns: #{$span};\n\n          grid-column: span #{$span} / span #{$span};\n        }\n      }\n    }\n  }\n\n  // -----------------------------------------------------------------------------\n  // Column percent span\n  // -----------------------------------------------------------------------------\n  .#{$prefix}--col-span-auto {\n    grid-column: auto;\n  }\n\n  .#{$prefix}--col-span-100 {\n    grid-column: 1 / -1;\n  }\n\n  .#{$prefix}--col-span-75 {\n    @include -percent-column-span($breakpoints, 0.75);\n  }\n\n  .#{$prefix}--col-span-50 {\n    @include -percent-column-span($breakpoints, 0.5);\n  }\n\n  .#{$prefix}--col-span-25 {\n    @include -percent-column-span($breakpoints, 0.25);\n  }\n\n  // -----------------------------------------------------------------------------\n  // Column offset\n  // -----------------------------------------------------------------------------\n  // Unconditional column start\n  // Note: we start at 1 and end at column-count to match grid lines. We do not\n  // start at column-count + 1 since starting at the end of the grid would mean\n  // a column would have no width available\n  @for $i from 1 through get-grid-columns($breakpoints) {\n    .#{$prefix}--col-start-#{$i} {\n      grid-column-start: $i;\n    }\n  }\n\n  // Unconditional column end\n  // Note: we start at 2 since a column ending at line 1 would have no width. We\n  // end at column-count + 1 since grid lines start at 1\n  @for $i from 2 through get-grid-columns($breakpoints) + 1 {\n    .#{$prefix}--col-end-#{$i} {\n      grid-column-end: $i;\n    }\n  }\n\n  .#{$prefix}--col-start-auto {\n    grid-column-start: auto;\n  }\n\n  .#{$prefix}--col-end-auto {\n    grid-column-end: auto;\n  }\n\n  // Responsive column start, end\n  @each $name, $value in $breakpoints {\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      // Responsive column start\n      @for $i from 1 through get-grid-columns($breakpoints) {\n        .#{$prefix}--#{$name}\\:col-start-#{$i} {\n          grid-column-start: $i;\n        }\n      }\n\n      // Responsive column end\n      @for $i from 2 through get-grid-columns($breakpoints) + 1 {\n        .#{$prefix}--#{$name}\\:col-end-#{$i} {\n          grid-column-end: $i;\n        }\n      }\n\n      .#{$prefix}--#{$name}\\:col-start-auto {\n        grid-column-start: auto;\n      }\n\n      .#{$prefix}--#{$name}\\:col-end-auto {\n        grid-column-end: auto;\n      }\n    } @else {\n      @include breakpoint($name) {\n        // Responsive column start\n        @for $i from 1 through get-grid-columns($breakpoints) {\n          .#{$prefix}--#{$name}\\:col-start-#{$i} {\n            grid-column-start: $i;\n          }\n        }\n\n        // Responsive column end\n        @for $i from 2 through get-grid-columns($breakpoints) + 1 {\n          .#{$prefix}--#{$name}\\:col-end-#{$i} {\n            grid-column-end: $i;\n          }\n        }\n\n        .#{$prefix}--#{$name}\\:col-start-auto {\n          grid-column-start: auto;\n        }\n\n        .#{$prefix}--#{$name}\\:col-end-auto {\n          grid-column-end: auto;\n        }\n      }\n    }\n  }\n}\n\n/// Generate the styles for a grid column\n@mixin -column-span($i) {\n  @if $i == 0 {\n    display: none;\n  } @else {\n    --cds-grid-columns: #{$i};\n\n    display: block;\n    grid-column: span $i / span $i;\n  }\n}\n\n/// Generate the styles for an unconditional class that represents a percent\n/// span of a grid\n@mixin -percent-column-span($breakpoints, $percent) {\n  @each $key, $value in $breakpoints {\n    $columns: get-column-count($breakpoints, $key);\n    $span: $columns * $percent;\n\n    @if is-smallest-breakpoint($key, $breakpoints) {\n      --cds-grid-columns: #{$span};\n\n      grid-column: span #{$span} / span #{$span};\n    } @else {\n      $previous-breakpoint: breakpoint-prev($key, $breakpoints);\n      $previous-column-count: get-column-count(\n        $breakpoints,\n        $previous-breakpoint\n      );\n      $previous-span: $previous-column-count * $percent;\n\n      @if $span != $previous-span {\n        @include breakpoint($key) {\n          --cds-grid-columns: #{$span};\n\n          grid-column: span #{$span} / span #{$span};\n        }\n      }\n    }\n  }\n}\n\n/// Get the grid width for a specific breakpoint name\n@function get-grid-width($breakpoints, $breakpoint) {\n  @return map.get(map.get($breakpoints, $breakpoint), width);\n}\n\n/// Get the grid column count for a specific breakpoint name\n@function get-column-count($breakpoints, $breakpoint) {\n  @return map.get(map.get($breakpoints, $breakpoint), columns);\n}\n\n/// Get the grid margin for a specific breakpoint name\n@function get-margin($breakpoints, $breakpoint) {\n  $value: map.get(map.get($breakpoints, $breakpoint), margin);\n  @if $value == 0 {\n    @return 0;\n  }\n  @return $value;\n}\n\n/// Return the largest column count from a set of breakpoints\n@function get-grid-columns($breakpoints) {\n  @return get-column-count($breakpoints, largest-breakpoint-name($breakpoints));\n}\n","//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@carbon/layout/scss/convert';\n@use 'config' as *;\n\n/// Provide a map and index, and get back the relevant key value\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Integer} $index - Key chain\n/// @return {String} Desired value\n/// @group @carbon/layout\n@function -key-by-index($map, $index) {\n  $keys: map.keys($map);\n  @return nth($keys, $index);\n}\n\n/// Get the value of the next breakpoint, or null for the last breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n < list.length($breakpoint-names) {\n    @return list.nth($breakpoint-names, $n + 1);\n  }\n  @return null;\n}\n\n/// Get the value of the previous breakpoint, or null for the first breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-prev(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n > 1 {\n    @return list.nth($breakpoint-names, $n - 1);\n  }\n  @return null;\n}\n\n/// Check to see if the given breakpoint name\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @return {Bool}\n/// @access public\n/// @group @carbon/layout\n@function is-smallest-breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @return list.index(map.keys($breakpoints), $name) == 1;\n}\n\n/// Returns the largest breakpoint name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function largest-breakpoint-name($breakpoints: $grid-breakpoints) {\n  $total-breakpoints: list.length($breakpoints);\n  @return -key-by-index($breakpoints, $total-breakpoints);\n}\n\n/// Get the infix for a given breakpoint in a list of breakpoints. Useful for generating the size part in a selector, for example: `.prefix--col-sm-2`.\n/// @param {String} $name - The name of the breakpoint\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-infix($name) {\n  @return '-#{$name}';\n}\n\n/// Generate a media query from the width of the given breakpoint to infinity\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (min-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width);\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      @content;\n    } @else {\n      @media (min-width: $width) {\n        @content;\n      }\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the maximum width of the given styles\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (max-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    // We borrow this logic from bootstrap for specifying the value of the\n    // max-width. The maximum width is calculated by finding the breakpoint and\n    // subtracting .02 from its value. This value is used instead of .01 to\n    // avoid rounding issues in Safari\n    // https://github.com/twbs/bootstrap/blob/c5b1919deaf5393fcca9e9b9d7ce9c338160d99d/scss/mixins/_breakpoints.scss#L34-L46\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width) - 0.02;\n    @media (max-width: $width) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the range between the lower and upper breakpoints\n/// @param {String | Number} $lower\n/// @param {String | Number} $upper\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $is-number-lower: meta.type-of($lower) == 'number';\n  $is-number-upper: meta.type-of($upper) == 'number';\n  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));\n  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));\n\n  @if $min and $max {\n    $min-width: if(not $is-number-lower and $min, map.get($min, width), $min);\n    $max-width: if(not $is-number-upper and $max, map.get($max, width), $max);\n    @media (min-width: $min-width) and (max-width: $max-width) {\n      @content;\n    }\n  } @else if $min != null and $max == null {\n    @include breakpoint-up($lower) {\n      @content;\n    }\n  } @else if $min == null and $max != null {\n    @include breakpoint-down($upper) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).';\n  }\n}\n\n/// Generate media query for the largest breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin largest-breakpoint($breakpoints: $grid-breakpoints) {\n  @include breakpoint(largest-breakpoint-name()) {\n    @content;\n  }\n}\n\n/// Generate a media query for a given breakpoint\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @include breakpoint-up($name, $breakpoints) {\n    @content;\n  }\n}\n","@use \"./styles/spacing.scss\" as *;\n@use \"@carbon/react/scss/grid\";\n@use \"@carbon/react/scss/components/aspect-ratio\";\n@include grid.css-grid();\n\n.content-section {\n\tpadding-top: $spacing-09;\n\tpadding-bottom: $spacing-10;\n}\n\n.content-block {\n\tmargin-top: $spacing-10;\n\tmargin-bottom: $spacing-13;\n\t\n\th3 {\n\t\tmargin-bottom: $spacing-07;\n\t}\n}\n\n.content-group {\n\tmargin-top: $spacing-07;\n\tmargin-bottom: $spacing-09;\n\n\th4 {\n\t\tmargin-bottom: $spacing-07;\n\t}\n}\n\n.content-item {\n\tpadding-top: $spacing-07;\n\tpadding-bottom: $spacing-07;\n}\n","$spacing-01: 0.125rem;\n$spacing-02: 0.25rem;\n$spacing-03: 0.5rem;\n$spacing-04: 0.75rem;\n$spacing-05: 1rem;\n$spacing-06: 1.5rem;\n$spacing-07: 2rem;\n$spacing-08: 2.5rem;\n$spacing-09: 3rem;\n$spacing-10: 4rem;\n$spacing-11: 5rem;\n$spacing-12: 6rem;\n$spacing-13: 10rem;\n","@use \"../../styles/theme.scss\" as *;\n@use \"../../styles/spacing.scss\" as *;\n\n.btn {\n\tborder: none;\n\theight: $spacing-07;\n\tpadding-left: $spacing-05;\n\tpadding-right: $spacing-09;\n}\n\n.btn-primary {\n\tbackground: $interactive;\n\tcolor: $on-color;\n}\n\n.btn-secondary {\n\tbackground: $layer;\n\tcolor: $on-layer-primary;\n}\n\n.btn-ghost {\n\tbackground: none;\n\tborder-width: 1px;\n\tcolor: $interactive;\n}\n","$base-03: #002b36;\n$base-02: #073642;\n$base-01: #586e75;\n$base-00: #657b83;\n$base-0: #839496;\n$base-1: #93a1a1;\n$base-2: #eee8d5;\n$base-3: #fdf6e3;\n$yellow: #b58900;\n$orange: #cb4b16;\n$red: #dc322f;\n$magenta: #d33682;\n$violet: #6c71c4;\n$blue: #268bd2;\n$cyan: #2aa198;\n$green: #859900;\n\n$base-3--hover: #f0e9d7;\n$base-2--hover: #e0dbc9;\n$magenta--hover: #bf3176;\n","@use \"../../styles/theme.scss\" as *;\n@use \"../../styles/spacing.scss\" as *;\n\n.card {\n\t:hover {\n\t\t\tbackground: $layer;\n\t}\n}\n\n.card__container{\n\tborder-radius: $spacing-03;\n\tmargin-left: -$spacing-05;\n\tmargin-right: -$spacing-05;\n\tpadding: $spacing-05;\n}\n\n.card__image {\n\tborder-radius: $spacing-02;\n\tbackground-color: $on-layer-secondary;\n}\n\n.card__copy {\n\tpadding-top: $spacing-05;\n}\n\n.card__link {\n\tposition: absolute;\n\tbottom: 0;\n}\n","@use \"../../styles/theme.scss\" as *;\n\n.outside {\n\tbackground: $layer;\n\tmargin-left: -16px;\n\tmargin-right: -16px;\n\tpadding: 16px;\n\tspan: 8;\n}\n","@use \"./styles/theme.scss\" as *;\n@use \"./styles/type.scss\" as *;\n@use \"./styles/spacing.scss\" as *;\n\nbody {\n\tbackground: $background;\n\tcolor: $on-bg-primary;\n\tmargin: 0;\n\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n\t'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n\tsans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\np {\n\t@include body-02;\n\tmargin-top: 0;\n\tmargin-bottom: $spacing-06;\n}\n\nh1 {\n\t@include heading-07;\n}\n\nh2 {\n\t@include heading-06;\n}\n\nh3 {\n\t@include heading-05;\n}\n\nh4 {\n\t@include heading-04;\n}\n\nh5 {\n\t@include heading-03;\n}\n\nh6 {\n\t@include heading-02;\n}\n\na {\n\t@include body-02;\n\tmargin: 0;\n\tpadding: 0;\n\tcolor: $interactive;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@mixin body-01 {\n\tfont-size: 0.875rem;\n\tline-height: 1.25rem;\n\tletter-spacing: 0.16px;\n\tfont-weight: 400;\n\tmargin: 0;\n}\n\n@mixin body-02 {\n\tfont-size: 1rem;\n\tline-height: 1.5rem;\n\tfont-weight: 400;\n\tmargin: 0;\n}\n\n@mixin heading-01 {\n\tfont-size: 0.875rem;\n\tline-height: 1.25rem;\n\tletter-spacing: 0.16px;\n\tfont-weight: 600;\n\tmargin: 0;\n}\n\n@mixin heading-02 {\n\tfont-size: 1rem;\n\tline-height: 1.5rem;\n\tfont-weight: 600;\n\tmargin: 0;\n}\n\n@mixin heading-03 {\n\tfont-size: 1.25rem;\n\tline-height: 1.75rem;\n\tfont-weight: 400;\n\tmargin: 0;\n}\n\n@mixin heading-04 {\n\tfont-size: 1.75rem;\n\tline-height: 2.25rem;\n\tfont-weight: 400;\n\tmargin: 0;\n}\n\n@mixin heading-05 {\n\tfont-size: 2rem;\n\tline-height: 2.5rem;\n\tfont-weight: 400;\n\tmargin: 0;\n}\n\n@mixin heading-06 {\n\tfont-size: 2.625rem;\n\tline-height: 3.125rem;\n\tfont-weight: 300;\n\tmargin: 0;\n}\n\n@mixin heading-07 {\n\tfont-size: 3.375rem;\n\tline-height: 4rem;\n\tfont-weight: 300;\n\tmargin: 0;\n}\n"],"names":[],"sourceRoot":""}